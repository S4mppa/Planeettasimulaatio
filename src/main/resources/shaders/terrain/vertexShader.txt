#version 440 core

layout (location = 0) in vec3 position;
layout (location = 1) in vec2 texCoord;
layout (location = 2) in vec3 normal;
layout (location = 3) in float iTexSlice;

out vec2 outTexCoord;
out float lightOffset;
out float visibility;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec4 outWorldPosition;
out vec4 outWorldPosition2;
out vec3 toCameraVector;
out float texSlice;

out vec3 vVSPos;

out float logz;

uniform mat4 viewMatrix;
uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform vec3 lightPosition;
uniform float time;
uniform vec3 cameraPos;
uniform vec3 planetPos;

uniform vec4 planeClip;

//fog constants
const float density = 0.004;
const float gradient = 3;

const float near = 1.0f;
const float far = 35000000000.0f;
const float C = 0.5; //resolution near the camera, for the logarithmic depth function

const float Fcoef = 2.0 / log2(far + 1.0);

void main(void){
  mat4 terrainMatrix = mat4(
      viewMatrix[0],
      viewMatrix[1],
      viewMatrix[2],
      vec4(0.0, 0.0, 0.0, 1.0));


    mat4 transformationMatrix2 = transformationMatrix;
    transformationMatrix2[3][0] = transformationMatrix[3][0] + cameraPos.x;
    transformationMatrix2[3][1] = transformationMatrix[3][1] + cameraPos.y;
    transformationMatrix2[3][2] = transformationMatrix[3][2] + cameraPos.z;


    vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
    vec4 positionRelativeToCam = terrainMatrix *  worldPosition;
    gl_ClipDistance[0] = dot(worldPosition, planeClip);
    gl_Position = projectionMatrix * positionRelativeToCam;
    gl_Position.z = log2(max(1e-6, 1.0 + gl_Position.w)) * Fcoef - 1.0;
    float a = 512.0;
    float p = a * 4.0;

	outTexCoord = (4.0 * a / p) * abs(mod(texCoord, p) - p * 0.5);
    outWorldPosition = vec4(position, 1.0);
    outWorldPosition2 = transformationMatrix2 * vec4(position, 1.0);
    texSlice = iTexSlice;
    toCameraVector = (inverse(viewMatrix) * vec4(0f, 0f, 0f, 1f)).xyz - worldPosition.xyz;
    surfaceNormal = normalize(normal);
    toLightVector = lightPosition - (transformationMatrix2 * vec4(position, 1.0)).xyz;

    vVSPos = (terrainMatrix * transformationMatrix * vec4(position, 1.0)).xyz;
    float distance = length(positionRelativeToCam.xyz);
    visibility = exp(-pow((distance*density), gradient));
    visibility = clamp(visibility, 0.0, 1.0);

    logz = 1.0 + gl_Position.w;
}